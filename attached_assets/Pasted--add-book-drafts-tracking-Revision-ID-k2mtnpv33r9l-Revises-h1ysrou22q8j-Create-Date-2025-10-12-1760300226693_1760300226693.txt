"""add_book_drafts_tracking

Revision ID: k2mtnpv33r9l
Revises: h1ysrou22q8j
Create Date: 2025-10-12 10:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'k2mtnpv33r9l'
down_revision: Union[str, Sequence[str], None] = 'h1ysrou22q8j'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("""
        -- Table for tracking books in progress
        CREATE TABLE book_drafts (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            gutenberg_id INTEGER NOT NULL,
            title VARCHAR(500) NOT NULL,
            author VARCHAR(300) NOT NULL,
            full_text TEXT NOT NULL,
            age_range VARCHAR(20),
            reading_level VARCHAR(20),
            genre VARCHAR(100),
            metadata JSONB DEFAULT '{}',
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW(),
            is_completed BOOLEAN DEFAULT false
        );
        
        -- Table for chapters in draft books
        CREATE TABLE draft_chapters (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            draft_id UUID NOT NULL REFERENCES book_drafts(id) ON DELETE CASCADE,
            chapter_number INTEGER NOT NULL,
            title VARCHAR(300) NOT NULL,
            content TEXT NOT NULL,
            html_formatting TEXT,
            word_count INTEGER NOT NULL,
            has_questions BOOLEAN DEFAULT false,
            created_at TIMESTAMP DEFAULT NOW(),
            UNIQUE(draft_id, chapter_number)
        );
        
        -- Indexes for performance
        CREATE INDEX idx_book_drafts_gutenberg_id ON book_drafts(gutenberg_id);
        CREATE INDEX idx_book_drafts_is_completed ON book_drafts(is_completed);
        CREATE INDEX idx_draft_chapters_draft_id ON draft_chapters(draft_id);
        CREATE INDEX idx_draft_chapters_has_questions ON draft_chapters(has_questions);
    """)


def downgrade() -> None:
    """Downgrade schema."""
    op.execute("""
        DROP TABLE IF EXISTS draft_chapters CASCADE;
        DROP TABLE IF EXISTS book_drafts CASCADE;
    """)